<Project>
  <PropertyGroup>

    <BuildDependsOn>
      VG_SetVariables;
      VG_CopyContentFiles;
      VG_LinkNodeModules;
      VG_GenerateDefaultStyleSheet;
      VG_CalculateInputs;
      VG_GenerateBundle;
      $(BuildDependsOn);
    </BuildDependsOn>

    <CleanDependsOn>
      VG_UnlinkNodeModules;
      VG_CleanLegacyEntryFiles;
      VG_CleanLegacyJSFiles;
      VG_CleanLegacyCSSFiles;
      VG_Clean;
      $(CleanDependsOn);
    </CleanDependsOn>

    <PrepareResourceNamesDependsOn>
      $(PrepareResourceNamesDependsOn)
    </PrepareResourceNamesDependsOn>
  </PropertyGroup>

  <Target Name="VG_SetVariables">
    <ItemGroup>
      <_ViewGeneratorNodeJsExe Include="$(MSBuildThisFileDirectory)..\..\..\Node.js.redist\*\tools\win-x64\node.exe"/>
      <_ViewGeneratorNodeJsExe Include="$(MSBuildThisFileDirectory)..\..\Node.js.redist*\tools\win-x64\node.exe"/>
    </ItemGroup>
    <PropertyGroup>
      <ViewGeneratorPath>$([System.IO.Path]::GetFullPath(&quot;$(MSBuildThisFileDirectory)..\&quot;))</ViewGeneratorPath>
      <ViewGeneratorToolsPath>$(ViewGeneratorPath)tools</ViewGeneratorToolsPath>
      <ViewGeneratorContentFilesPath>$(ViewGeneratorPath)contentFiles\</ViewGeneratorContentFilesPath>

      <__ViewGeneratorNodeJsExe>@(_ViewGeneratorNodeJsExe);</__ViewGeneratorNodeJsExe>
      <ViewGeneratorNodeJsExe>$(__ViewGeneratorNodeJsExe.Substring(0, $(__ViewGeneratorNodeJsExe.IndexOf(';'))))</ViewGeneratorNodeJsExe>
    </PropertyGroup>
  </Target>

  <Target Name="VG_LinkNodeModules" Condition="'$(PluginsRelativePath)' != ''" >
    <Exec Condition="!Exists('$(ProjectDir)node_modules\webview.plugins')" Command="mklink /J &quot;$(ProjectDir)node_modules\webview.plugins&quot; &quot;$(ProjectDir)$(PluginsRelativePath)node_modules&quot;" />
  </Target>

  <Target Name="VG_UnlinkNodeModules" Condition="Exists('$(ProjectDir)node_modules\webview.plugins')">
    <RemoveDir Directories="$(ProjectDir)node_modules\webview.plugins" />
  </Target>

  <Target Name="VG_CleanLegacyEntryFiles" >
    <ItemGroup>
      <EntryFilesToDelete Include="**\*.entry" />
    </ItemGroup>
    <Message Text="Deleting old files: @(EntryFilesToDelete)" Importance="high" />
    <Delete Files="@(EntryFilesToDelete)"/>
  </Target>

  <Target Name="VG_CleanLegacyJSFiles" >
    <ItemGroup>
      <JSFilesToDelete Include="**\*.js" Exclude="node_modules\**\*.js"/>
    </ItemGroup>
    <Message Text="Deleting old files: @(JSFilesToDelete)" Importance="high" />
    <Delete Files="@(JSFilesToDelete)"/>
  </Target>

  <Target Name="VG_CleanLegacyCSSFiles" >
    <ItemGroup>
      <CSSFilesToDelete Include="**\*.css" Exclude="node_modules\**\*.css;**\*.min.css"/>
    </ItemGroup>
    <Message Text="Deleting old files: @(CSSFilesToDelete)" Importance="high" />
    <Delete Files="@(CSSFilesToDelete)"/>
  </Target>

  <Target Name="VG_SetupViewPacker" DependsOnTargets="VG_EnsureViewPackerInstalled" Condition="!Exists('$(ViewGeneratorToolsPath)\webpack\node_modules')">
    <Exec Command="mklink /J &quot;$(ViewGeneratorToolsPath)\webpack\node_modules&quot; &quot;$(ViewPackerToolNodeModules)&quot;" />
  </Target>

  <Target Name="VG_GenerateDefaultStyleSheet" DependsOnTargets="VG_SetupViewPacker;VG_SetVariables;VG_LinkNodeModules" Inputs="@(DefaultStyleSheet)" Outputs="%(DefaultStyleSheet.Filename).css" >
    <CallTarget Targets="VG_GenerateDefaultStyleSheetInner" />
  </Target>

  <Target Name="VG_GenerateDefaultStyleSheetInner" DependsOnTargets="VG_CleanLegacyCSSFiles">
    <PropertyGroup>
      <WP_Mode>development</WP_Mode>
    </PropertyGroup>
    
    <PropertyGroup Condition=" '$(Configuration.Split(&quot;_&quot;)[0])' == 'Debug' ">
      <WP_DevTool>inline-source-map</WP_DevTool>
    </PropertyGroup>
      
    <PropertyGroup Condition=" '$(Configuration.Split(&quot;_&quot;)[0])' == 'Release' ">
      <WP_DevTool>false</WP_DevTool>
    </PropertyGroup>

    <Exec Command="&quot;$(ViewGeneratorNodeJsExe)&quot; &quot;$(ViewPackerToolScript)&quot; --config='$(ViewGeneratorToolsPath)\webpack\webpack_stylesheets.config.js' --mode=$(WP_Mode) --devtool=$(WP_DevTool) --entryPath='%(DefaultStyleSheet.Identity)'" />
  </Target>

  <Target Name="VG_EnsureViewPackerInstalled" Condition="'$(ViewPackerToolScript)' == ''">
    <Error Text="View Packer dependency is not installed" />
  </Target>

  <Target Name="VG_CalculateInputs">
    <!-- TODO: check if this includes all possible inputs -->
    <ItemGroup>
      <VG_Inputs Include="**\*.tsx" Exclude="node_modules\**\*.tsx" />
      <VG_Inputs Include="**\*.ts" Exclude="node_modules\**\*.ts" />
      <UpToDateCheckInput Include="$(VG_Inputs)" Exclude="@(UpToDateCheckInput)" />
    </ItemGroup>
  </Target>

  <Target Name="VG_GenerateBundle" Inputs="@(VG_Inputs)" Outputs="viewgeneratorbuild.cache" BeforeTargets="AfterResolveReferences" DependsOnTargets="VG_SetupViewPacker;VG_SetVariables;VG_CopyContentFiles;VG_GenerateDefaultStyleSheet;VG_CalculateInputs">
    <CallTarget Targets="VG_GenerateBundleInner" />
  </Target>

  <Target Name="VG_GenerateBundleInner" DependsOnTargets="VG_CleanLegacyEntryFiles;VG_CleanLegacyJSFiles;VG_CleanLegacyCSSFiles">
    <Message Text="Generating bundle" Importance="high" />

    <PropertyGroup>
      <WP_Mode>development</WP_Mode>
    </PropertyGroup>

    <PropertyGroup Condition="'$(WP_ConfigFileName)' == ''">
      <WP_ConfigFileName>webpack_views</WP_ConfigFileName>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration.Split(&quot;_&quot;)[0])' == 'Debug' ">
      <WP_DevTool>inline-source-map</WP_DevTool>
      <WP_UseCache>true</WP_UseCache>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration.Split(&quot;_&quot;)[0])' == 'Release' ">
      <WP_DevTool>false</WP_DevTool>
      <WP_UseCache>false</WP_UseCache>
    </PropertyGroup>

    <Exec Command="&quot;$(ViewGeneratorNodeJsExe)&quot; &quot;$(ViewPackerToolScript)&quot; --config='$(ViewGeneratorToolsPath)\webpack\$(WP_ConfigFileName).config.js' --mode=$(WP_Mode) --devtool=$(WP_DevTool) --useCache=$(WP_UseCache) --pluginsRelativePath='$(PluginsRelativePath)' --projectDir='$(WP_OverrideProjectDir)'" />

    <Touch Files="viewgeneratorbuild.cache" AlwaysCreate="true" />
  </Target>

  <Target Name="VG_IncludeGeneratedResources" AfterTargets="VG_GenerateBundle">
    <ItemGroup>
      <EmbeddedResource Include="**\*.js" Exclude="node_modules\**\*.js" />
      <EmbeddedResource Include="**\*.css" Exclude="node_modules\**\*.css;**\*.min.css" />
      <EmbeddedResource Include="**\*.entry" />
    </ItemGroup>
  </Target>

  <Target Name="VG_CopyContentFiles" DependsOnTargets="VG_SetVariables" Condition="!Exists('$(ProjectDir)viewgenerator.cache') OR $([System.IO.File]::GetLastWriteTime('$(ViewGeneratorContentFilesPath)viewgenerator.cache').Ticks) &gt; $([System.IO.File]::GetLastWriteTime('$(ProjectDir)viewgenerator.cache').Ticks)">
    <CreateItem Include="$(ViewGeneratorContentFilesPath)viewgenerator.cache">
      <Output TaskParameter="Include" ItemName="CacheFile"/>
    </CreateItem>
    <CreateItem Include="$(ViewGeneratorContentFilesPath)*.json">
      <Output TaskParameter="Include" ItemName="TemplatesToCopy"/>
    </CreateItem>
    <CreateItem Include="$(ViewGeneratorContentFilesPath)**\*.d.ts">
      <Output TaskParameter="Include" ItemName="FilesToCopy"/>
    </CreateItem>
    <Message Text="Copying View Generator content files" Importance="Normal" />
    <Copy SourceFiles="@(CacheFile)" DestinationFolder="$(ProjectDir)%(CacheFile.RecursiveDir)" />
    <Copy SourceFiles="@(TemplatesToCopy)" DestinationFolder="$(ProjectDir)%(TemplatesToCopy.RecursiveDir)" Condition="!Exists('%(FullPath)')" />
    <Copy SourceFiles="@(FilesToCopy)" DestinationFolder="$(ProjectDir)%(FilesToCopy.RecursiveDir)" SkipUnchangedFiles="true" />
  </Target>

  <Target Name="VG_Clean" BeforeTargets="Clean">
    <Delete Files="viewgeneratorbuild.cache" />
  </Target>
</Project>