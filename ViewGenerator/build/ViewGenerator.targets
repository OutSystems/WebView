<Project>
  <PropertyGroup>

    <CleanDependsOn>
      VG_UnlinkNodeModules;
      VG_CleanEntryFiles;
      VG_CleanJSFiles;
      VG_CleanCSSFiles;
      VG_Clean;
      $(CleanDependsOn);
    </CleanDependsOn>
      
  </PropertyGroup>

  <ItemGroup>
    <None Remove="**\*.cache"/>
  </ItemGroup>
  
  <Target Name="VG_SetVariables">
      <ItemGroup Condition="'$(OS)' == 'Windows_NT'">
          <_ViewGeneratorNodeJsExe Include="$(MSBuildThisFileDirectory)..\..\..\Node.js.redist\*\tools\win-x64\node.exe"/>
          <_ViewGeneratorNodeJsExe Include="$(MSBuildThisFileDirectory)..\..\Node.js.redist*\tools\win-x64\node.exe"/>

      </ItemGroup>
      <ItemGroup Condition="'$(OS)' != 'Windows_NT'">
          <_ViewGeneratorNodeJsExe Include="$(MSBuildThisFileDirectory)..\..\..\Node.js.redist\*\tools\osx-x64\node"/>
          <_ViewGeneratorNodeJsExe Include="$(MSBuildThisFileDirectory)..\..\Node.js.redist*\tools\osx-x64\node"/>

      </ItemGroup>
      
    <PropertyGroup>
      <ViewGeneratorPath>$([System.IO.Path]::GetFullPath(&quot;$(MSBuildThisFileDirectory)..\&quot;))</ViewGeneratorPath>
      <ViewGeneratorToolsPath>$(ViewGeneratorPath)tools</ViewGeneratorToolsPath>
      <ViewGeneratorContentFilesPath>$(ViewGeneratorPath)contentFiles\</ViewGeneratorContentFilesPath> 
      <__ViewGeneratorNodeJsExe>@(_ViewGeneratorNodeJsExe);</__ViewGeneratorNodeJsExe>
      <ViewGeneratorNodeJsExe>$(__ViewGeneratorNodeJsExe.Substring(0, $(__ViewGeneratorNodeJsExe.IndexOf(';'))))</ViewGeneratorNodeJsExe>
    </PropertyGroup>
  </Target>

  <Target Name="VG_LinkNodeModules" Condition="'$(PluginsRelativePath)' != '' and !Exists('$(ProjectDir)node_modules\webview.plugins')" >
      <Exec Condition="'$(OS)' == 'Windows_NT'" Command="mklink /J &quot;$(ProjectDir)node_modules\webview.plugins&quot; &quot;$(ProjectDir)$(PluginsRelativePath)node_modules&quot;" />
      <!-- Take into account that ln -s takes the arguments in a different order from mklink e.g. first is destination and second is source -->
      <Exec Condition="'$(OS)' != 'Windows_NT'" Command="ln -s &quot;$(ProjectDir)$(PluginsRelativePath)node_modules&quot; &quot;$(ProjectDir)node_modules/webview.plugins&quot;" />
  </Target>

  <Target Name="VG_UnlinkNodeModules">     
    <RemoveDir Condition="Exists('$(ProjectDir)node_modules\webview.plugins')" Directories="$(ProjectDir)node_modules\webview.plugins" />
  </Target>
    
  <Target Name="VG_CleanEntryFiles" >
    <ItemGroup>
      <EntryFilesToDelete Include="**\*.entry" />
    </ItemGroup>
    <Message Condition="'@(EntryFilesToDelete)' != ''" Text="Deleting old files: @(EntryFilesToDelete)" Importance="high" />
    <Delete Files="@(EntryFilesToDelete)"/>
  </Target>

  <Target Name="VG_CleanJSFiles" >
    <ItemGroup>
      <JSFilesToDelete Include="**\*.js" Exclude="node_modules\**\*.js"/>
      <JSFilesToDelete Condition="$(CleanFilesExcludePath) != ''" Remove="$(CleanFilesExcludePath)\**\*.js"/>
    </ItemGroup>
    <Message Condition="'@(JSFilesToDelete)' != ''" Text="Deleting old files: @(JSFilesToDelete)" Importance="high" />
    <Delete Files="@(JSFilesToDelete)"/>
  </Target>

  <Target Name="VG_CleanCSSFiles" >
    <ItemGroup>
      <CSSFilesToDelete Include="**\*.css" Exclude="node_modules\**\*.css;**\*.min.css"/>
      <CSSFilesToDelete Condition="$(CleanFilesExcludePath) != ''" Remove="$(CleanFilesExcludePath)\**\*.css"/>
    </ItemGroup>
    <Message Condition="'@(CSSFilesToDelete)' != ''" Text="Deleting old files: @(CSSFilesToDelete)" Importance="high" />
    <Delete Files="@(CSSFilesToDelete)"/>
  </Target>

  <Target Name="VG_SetupViewPacker" DependsOnTargets="VG_EnsureViewPackerInstalled;VG_SetVariables" Condition="!Exists('$(ViewGeneratorToolsPath)\webpack\node_modules')">
      <Exec Condition="'$(OS)' == 'Windows_NT'" Command="mklink /J &quot;$(ViewGeneratorToolsPath)\webpack\node_modules&quot; &quot;$(ViewPackerToolNodeModules)&quot;" />
      <!-- Take into account that ln -s takes the arguments in a different order from mklink e.g. first is destination and second is source -->
      <Exec Condition="'$(OS)' != 'Windows_NT'" Command="ln -s &quot;$(ViewPackerToolNodeModules)&quot; &quot;$(ViewGeneratorToolsPath)webpack/node_modules&quot;" />
  </Target>

  <Target Name="VG_EnsureViewPackerInstalled" Condition="'$(ViewPackerToolScript)' == ''">
    <Error Text="View Packer dependency is not installed" />
  </Target>

  <!-- /// -->
  <!-- Webpack related targets, property and item groups -->
  <!-- /// -->

  <PropertyGroup>
    <WP_Mode>development</WP_Mode>
  </PropertyGroup>

  <PropertyGroup Condition="'$(WP_ConfigFileName)' == ''">
    <WP_ConfigFileName>webpack_views</WP_ConfigFileName>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration.Split(&quot;_&quot;)[0])' == 'Debug'">
    <WP_DevTool>inline-source-map</WP_DevTool>
    <WP_UseCache>true</WP_UseCache>
  </PropertyGroup>

  <PropertyGroup Condition="'$(Configuration.Split(&quot;_&quot;)[0])' == 'Release'">
    <WP_DevTool>false</WP_DevTool>
    <WP_UseCache>false</WP_UseCache>
  </PropertyGroup>
  
  <ItemGroup>
    <VG_Inputs Include="**\*.tsx" Exclude="node_modules\**\*.tsx" />
    <VG_Inputs Include="**\*.ts" Exclude="node_modules\**\*.ts" />
    <VG_Inputs Include="**\*.scss" Exclude="node_modules\**\*.scss" />
    <VG_Inputs Condition="'$(PluginsRelativePath)' != ''" Include="$(PluginsRelativePath)VG_Build.cache" />
  </ItemGroup>

  <ItemGroup>
    <VG_StyleSheet_Inputs Include="@(DefaultStyleSheet)"/>
    <VG_StyleSheet_Inputs Condition="'@(DefaultStyleSheet)' != ''" Include="**\*.scss" Exclude="node_modules\**\*.scss" />
    <VG_Workers_Inputs Include="@(Workers)" />
  </ItemGroup>
    
  <ItemGroup>
    <UpToDateCheckInput Include="@(VG_Inputs)" Exclude="@(UpToDateCheckInput)" />
    <UpToDateCheckInput Include="@(DefaultStyleSheet)" Exclude="@(UpToDateCheckInput)" />
    <UpToDateCheckInput Include="@(VG_Workers)" Exclude="@(UpToDateCheckInput)" />
  </ItemGroup>

  <!-- Webpack bundle generation targets-->
  <Target Name="VG_GenerateBundle" Inputs="@(VG_Inputs);@(VG_Workers_Inputs)" Outputs="VG_Build.cache" Condition="'$(UsingMicrosoftNETSdk)' != 'true' Or '$(DesignTimeBuild)' != 'true'" AfterTargets="AfterResolveReferences" DependsOnTargets="VG_SetVariables;VG_SetupViewPacker;VG_LinkNodeModules;VG_Setup">
    <CallTarget Targets="VG_GenerateBundleInner" />
  </Target>

  <Target Name="VG_GenerateBundleInner" DependsOnTargets="VG_CleanEntryFiles;VG_CleanJSFiles;VG_CleanCSSFiles">
    <Message Text="Generating bundle" Importance="high" />

    <!-- Default stylesheets bundle generation -->
    <CallTarget Condition="'@(VG_StyleSheet_Inputs)' != ''" Targets="VG_GenerateDefaultStyleSheet" />

    <!-- Workers bundle generation -->
    <CallTarget Condition="'@(VG_Workers_Inputs)' != ''" Targets="VG_GenerateWorkersBundle" />

    <!-- Main bundle generation -->
    <Exec Command="&quot;$(ViewGeneratorNodeJsExe)&quot; &quot;$(ViewPackerToolScript)&quot; --config='$(ViewGeneratorToolsPath)\webpack\$(WP_ConfigFileName).config.js' --mode=$(WP_Mode) --devtool=$(WP_DevTool) --useCache=$(WP_UseCache) --pluginsRelativePath='$(PluginsRelativePath)' --assemblyName='$(AssemblyName)'" />
    
    <Touch Files="VG_Build.cache" AlwaysCreate="true" />
  </Target>

  <!-- Default stylesheet related target -->
  <Target Name="VG_GenerateDefaultStyleSheet" > 
    <Exec Command="&quot;$(ViewGeneratorNodeJsExe)&quot; &quot;$(ViewPackerToolScript)&quot; --config='$(ViewGeneratorToolsPath)\webpack\webpack_stylesheets.config.js' --mode=$(WP_Mode) --devtool=$(WP_DevTool) --entryPath='@(DefaultStyleSheet)' --assemblyName='$(AssemblyName)'" />
  </Target>

  <!-- Workers related target -->
  <Target Name="VG_GenerateWorkersBundle" >
    <Exec Command="&quot;$(ViewGeneratorNodeJsExe)&quot; &quot;$(ViewPackerToolScript)&quot; --config='$(ViewGeneratorToolsPath)\webpack\webpack_workers.config.js' --mode=$(WP_Mode) --devtool=$(WP_DevTool) --useCache=$(WP_UseCache)" />
  </Target>

  <!-- /// -->
  <!-- End of Webpack related targets, property and item groups -->
  <!-- /// -->

  <Target Name="VG_IncludeGeneratedResources" AfterTargets="VG_GenerateBundle">
    <ItemGroup>
      <EmbeddedResource Include="**\*.js" Exclude="node_modules\**\*.js;@(EmbeddedResource)" />
      <EmbeddedResource Include="**\*.css" Exclude="node_modules\**\*.css;**\*.min.css;@(EmbeddedResource)" />
      <EmbeddedResource Include="**\*.entry" Exclude="@(EmbeddedResource)" />
    </ItemGroup>
  </Target>
  
  <Target Name="VG_Setup" DependsOnTargets="VG_SetVariables" Condition="!Exists('$(ProjectDir)VG.cache') OR $([System.IO.File]::GetLastWriteTime('$(ViewGeneratorContentFilesPath)VG.cache').Ticks) &gt; $([System.IO.File]::GetLastWriteTime('$(ProjectDir)VG.cache').Ticks)">      
    
    <CreateItem Include="$(ViewGeneratorContentFilesPath)VG.cache">
      <Output TaskParameter="Include" ItemName="CacheFile" />
    </CreateItem>
      
    <CreateItem Include="$(ViewGeneratorContentFilesPath)*.json">
      <Output TaskParameter="Include" ItemName="TemplatesToCopy" />
    </CreateItem>
      
    <CreateItem Include="$(ViewGeneratorContentFilesPath)**\*.d.ts">
      <Output TaskParameter="Include" ItemName="FilesToCopy" />
    </CreateItem>
      
    <Message Text="Copying View Generator content files" Importance="Normal" />
      
    <Copy SourceFiles="@(CacheFile)" DestinationFolder="$(ProjectDir)%(CacheFile.RecursiveDir)" />
    <Copy SourceFiles="@(TemplatesToCopy)" DestinationFolder="$(ProjectDir)%(TemplatesToCopy.RecursiveDir)" Condition="!Exists('%(FullPath)')" SkipUnchangedFiles="true" />
    <Copy SourceFiles="@(FilesToCopy)" DestinationFolder="$(ProjectDir)%(FilesToCopy.RecursiveDir)" SkipUnchangedFiles="true" />

    <Delete Condition="Exists('$(ProjectDir)VG_Build.cache')" Files="VG_Build.cache" />
  </Target>
  
  <Target Name="VG_Clean" BeforeTargets="Clean" >
    <Delete Files="VG_Build.cache" />
  </Target>
</Project>