<Project>
  <PropertyGroup>

    <BuildDependsOn>
      VGC_GenerateView;
      $(BuildDependsOn)
    </BuildDependsOn>

    <CleanDependsOn>
      VGC_CleanGenerated;
      $(CleanDependsOn);
    </CleanDependsOn>

    <ViewGeneratorCorePath>$([System.IO.Path]::GetFullPath(&quot;$(MSBuildThisFileDirectory)..\&quot;))</ViewGeneratorCorePath>
    <ViewGeneratorCoreContentFilesPath>$(ViewGeneratorCorePath)contentFiles\</ViewGeneratorCoreContentFilesPath>
  </PropertyGroup>

  <ItemGroup>
    <None Remove="**\*.cache"/>
  </ItemGroup>

  <Target Name="VGC_SetVariables">
      <ItemGroup Condition="'$(OS)' == 'Windows_NT'">
          <_ViewGeneratorCoreNodeJsExe Include="$(MSBuildThisFileDirectory)..\..\..\Node.js.redist\*\tools\win-x64\node.exe"/>
          <_ViewGeneratorCoreNodeJsExe Include="$(MSBuildThisFileDirectory)..\..\Node.js.redist*\tools\win-x64\node.exe"/>

      </ItemGroup>
      <ItemGroup Condition="'$(OS)' != 'Windows_NT'">
          <_ViewGeneratorCoreNodeJsExe Include="$(MSBuildThisFileDirectory)..\..\..\Node.js.redist\*\tools\osx-x64\node"/>
          <_ViewGeneratorCoreNodeJsExe Include="$(MSBuildThisFileDirectory)..\..\Node.js.redist*\tools\osx-x64\node"/>

      </ItemGroup>
      
    <PropertyGroup>
      <__ViewGeneratorCoreNodeJsExe>@(_ViewGeneratorCoreNodeJsExe);</__ViewGeneratorCoreNodeJsExe>
      <ViewGeneratorCoreNodeJsExe>$(__ViewGeneratorCoreNodeJsExe.Substring(0, $(__ViewGeneratorCoreNodeJsExe.IndexOf(';'))))</ViewGeneratorCoreNodeJsExe>
    </PropertyGroup>
  </Target>

  <ItemGroup>
    <VGC_Inputs Include="$(OverrideProjectDir)**\*.tsx" Exclude="$(OverrideProjectDir)node_modules\**\*.tsx" />
    <VGC_Inputs Include="$(OverrideProjectDir)**\*.ts" Exclude="$(OverrideProjectDir)node_modules\**\*.ts" />
    <UpToDateCheckInput Include="@(VGC_Inputs)" Exclude="@(UpToDateCheckInput)" />
  </ItemGroup>

  <Target Name="VGC_GenerateView" Inputs="@(VGC_Inputs)" Outputs="VGC_Build.cache" Condition="'$(UsingMicrosoftNETSdk)' != 'true' Or '$(DesignTimeBuild)' != 'true'" BeforeTargets="CustomTransformDuringBuild;TransformDuringBuild;AfterResolveReferences" DependsOnTargets="VGC_SetVariables;VGC_Setup">
    <CallTarget Targets="VGC_GenerateViewInner" />
  </Target>
 
  <Target Name="VGC_GenerateViewInner" DependsOnTargets="VGC_CleanGenerated">
    <Message Importance="High" Text="Generating View files" />
    <Exec Command="&quot;$(ViewGeneratorCoreNodeJsExe)&quot; &quot;$(MSBuildThisFileDirectory)..\tools\node_modules\@outsystems\ts2lang\ts2lang-main.js&quot; -f &quot;$(ProjectDir)ts2lang.json&quot; -t &quot;$(MSBuildThisFileDirectory)..\tools\ViewGenerator.js&quot;" />

    <Touch Files="VGC_Build.cache" AlwaysCreate="true" />
  </Target>

  <!-- old-format and new-format projects have different built-in targets. In order to support both we need to have two
       different alternative ways of adding the generated code to the target project :( -->
       
  <Target Name="VGC_IncludeGeneratedFiles_NonSdk" BeforeTargets="CoreCompile">
    <ItemGroup>
      <Compile Include="$(ViewGeneratorGeneratedFolder)\**\*.cs" Exclude="@(Compile)" />
    </ItemGroup>
  </Target>

  <Target Name="VGC_IncludeGeneratedFiles_Sdk" AfterTargets="VGC_GenerateView">
    <ItemGroup>
      <Compile Include="$(ViewGeneratorGeneratedFolder)\**\*.cs" Exclude="@(Compile)" />
    </ItemGroup>
  </Target>
  
  <Target Name="VGC_CleanGenerated" BeforeTargets="Clean" >
    <Error Condition="$(ViewGeneratorGeneratedFolder) == ''" Text="Generated folder is not set." />

    <ItemGroup>
      <GeneratedTs2LangFiles Include="$(ViewGeneratorGeneratedFolder)\**\*.cs" />
    </ItemGroup>

    <Delete Files="@(GeneratedTs2LangFiles)" />
    <Delete Files="VGC_Build.cache" />
  </Target>


  <Target Name="VGC_Setup" DependsOnTargets="VGC_SetVariables" Condition="!Exists('$(ProjectDir)VGC.cache') OR $([System.IO.File]::GetLastWriteTime('$(ViewGeneratorCoreContentFilesPath)VGC.cache').Ticks) &gt; $([System.IO.File]::GetLastWriteTime('$(ProjectDir)VGC.cache').Ticks)">
    <CreateItem Include="$(ViewGeneratorCoreContentFilesPath)VGC.cache">
      <Output TaskParameter="Include" ItemName="CacheFile" />
    </CreateItem>

    <Copy SourceFiles="@(CacheFile)" DestinationFolder="$(ProjectDir)%(CacheFile.RecursiveDir)" />

    <Delete Condition="Exists('$(ProjectDir)VGC_Build.cache')" Files="VGC_Build.cache" />
  </Target>

</Project>
